import subprocess

from fastapi import FastAPI, Request
from starlette.middleware.sessions import SessionMiddleware
from authlib.integrations.starlette_client import OAuth
from dotenv import load_dotenv
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
import models, schemas, crud
from database import engine, get_db, Base
import os
from sqlalchemy import text

load_dotenv()
print("‚úÖ FastAPI –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º SessionMiddleware (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è OAuth)
app.add_middleware(SessionMiddleware, secret_key=os.getenv("SESSION_SECRET", "supersecret"))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OAuth
oauth = OAuth()
oauth.register(
    name="google",
    client_id=os.getenv("GOOGLE_CLIENT_ID"),
    client_secret=os.getenv("GOOGLE_CLIENT_SECRET"),
    server_metadata_url="https://accounts.google.com/.well-known/openid-configuration",
    client_kwargs={"scope": "openid email profile"},
)

BASE_DIR = os.path.dirname(__file__)  # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≥–¥–µ –ª–µ–∂–∏—Ç main.py
TABLES_FILE = os.path.join(BASE_DIR, "sql", "tables.sql")
INSERTS_FILE = os.path.join(BASE_DIR, "sql", "inserts.sql")

def execute_sql_file(filename):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SQLAlchemy"""
    with open(filename, "r", encoding="utf-8") as f:
        sql_content = f.read()

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ;
    statements = [stmt.strip() for stmt in sql_content.split(";") if stmt.strip()]

    success, fail = 0, 0
    with engine.connect() as conn:
        for stmt in statements:
            try:
                conn.execute(text(stmt))
                conn.commit()
                success += 1
            except Exception as e:
                conn.rollback()
                fail += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ SQL:\n{stmt[:80]}...\n–ü—Ä–∏—á–∏–Ω–∞: {e}\n")
    print(f"‚úÖ –§–∞–π–ª {filename} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {success} —É—Å–ø–µ—à–Ω–æ, {fail} —Å –æ—à–∏–±–∫–∞–º–∏.")

@app.on_event("startup")
def on_startup():
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    execute_sql_file(TABLES_FILE)

    print("üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    execute_sql_file(INSERTS_FILE)

@app.get("/")
def root():
    return {"message": "–ü—Ä–∏–≤–µ—Ç! API —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

# POST ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/users/", response_model=schemas.UserResponse)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    return crud.create_user(db, user)

# GET ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/users/", response_model=list[schemas.UserResponse])
def list_users(db: Session = Depends(get_db)):
    return crud.get_users(db)

@app.get("/auth/login")
async def login(request: Request):
    redirect_uri = request.url_for("auth_callback")
    print("Redirecting to:", redirect_uri)
    return await oauth.google.authorize_redirect(request, redirect_uri)

@app.get("/auth/callback", name="auth_callback")
async def auth_callback(request: Request):
    try:
        token = await oauth.google.authorize_access_token(request)
        user_info = token.get("userinfo")
        print("Google user:", user_info)
        return user_info
    except Exception as e:
        return {"error": str(e)}

@app.get("/categories", response_model=list[schemas.KukingCategoryResponse])
def get_categories(db: Session = Depends(get_db)):
    return db.query(models.KukingCategory).all()


@app.get("/recepts", response_model=list[schemas.KukingReceptResponse])
def get_recepts(limit: int = 20, db: Session = Depends(get_db)):
    return db.query(models.KukingRecept).limit(limit).all()


@app.get("/recepts/{recept_id}", response_model=schemas.KukingReceptResponse)
def get_recept(recept_id: int, db: Session = Depends(get_db)):
    recept = db.query(models.KukingRecept).filter(models.KukingRecept.id_recepts == recept_id).first()
    if not recept:
        raise HTTPException(status_code=404, detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return recept